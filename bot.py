import telebot
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
import os

TOKEN = os.getenv("TOKEN")  # Railway/Render k√∂rnyezeti v√°ltoz√≥
bot = telebot.TeleBot(TOKEN)

ser_data = {}  # ide mentj√ºk a felhaszn√°l√≥i adatokat

# 1-es gomb funkci√≥ja (sz√°mol√≥)
def calc(message):
    try:
        data = message.text.strip().split()
        dolgozottnap = int(data[0])
        tav = int(data[1])        # int
        fogy = float(data[2])
        ar = int(data[3])

        ossz_tav = dolgozottnap * tav * 2
        uzemanyag_koltseg = ossz_tav / 100 * fogy * ar

        szoveg = (
            f"Ledolgozott napok sz√°ma: {dolgozottnap}\n"
            f"Telephely oda-vissza: {tav*2} km\n"
            f"√ñsszesen: {ossz_tav} km\n"
            f"Fogyaszt√°s: {fogy} l/100km\n"
            f"G√°zolaj √°ra: {ar} Ft/l\n"
            f"√územanyag k√∂lts√©g √∂sszesen: {round(uzemanyag_koltseg)} Ft"
        )
        bot.reply_to(message, szoveg)
    except Exception as e:
        bot.reply_to(message, "Hib√°s adatbevitel. K√©rlek √≠gy add meg az adatokat, minden adatot k√ºl√∂n sorba √≠rva:\n\nLedolgozott napok sz√°ma:\nTelephely oda-vissza:\nFogyaszt√°s:\nG√°zolaj √°ra:")

# 2-es gomb funkci√≥ja (t√∫l√≥ra k√©rdez√©s)
def ask_location(message):
    chat_id = message.chat.id
    user_data[chat_id] = {}
    user_data[chat_id]['helyszin'] = message.text.strip()
    bot.send_message(chat_id, "Melyik nap √©s h√°ny √≥r√°t dolgozt√°l? Add meg sz√≥k√∂zzel elv√°lasztva (pl. '15 1'), t√∂bb napot √∫j sorba √≠rva is adhatsz meg.")
    bot.register_next_step_handler(message, ask_hours)

def ask_hours(message):
    chat_id = message.chat.id
    lines = message.text.strip().split('\n')
    napok = []
    ossz_orak = 0
    hibas_sorok = []
    
    for line in lines:
        parts = line.strip().split()
        if len(parts) != 2:
            hibas_sorok.append(line)
            continue
        try:
            nap = int(parts[0])
            mennyi = float(parts[1])
            napok.append((nap, mennyi))
            ossz_orak += mennyi
        except:
            hibas_sorok.append(line)
            
    if hibas_sorok:
        bot.send_message(chat_id, f"Hib√°s form√°tum a k√∂vetkez≈ë sor(ok)ban:\n" + "\n".join(hibas_sorok) + "\nK√©rlek, pr√≥b√°ld √∫jra.")
        bot.register_next_step_handler(message, ask_hours)
        return
    
    user_data[chat_id]['napok'] = napok
    
    helyszin = user_data[chat_id].get('helyszin', 'Ismeretlen hely')
    szoveg = f"T√∫l√≥r√°k helysz√≠ne: {helyszin}\nR√∂gz√≠tett napok √©s √≥r√°k:\n"
    for nap, mennyi in napok:
        szoveg += f" - {nap}. nap: {mennyi} √≥ra\n"
    szoveg += f"√ñsszes t√∫l√≥ra: {ossz_orak} √≥ra"
    
    bot.send_message(chat_id, szoveg)

# /start parancs - megjelen√≠ti az inline gombokat
@bot.message_handler(commands=['start'])
def start(message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚õΩÔ∏è", callback_data="run_calc"),  # 1-es gomb
        InlineKeyboardButton("üï∞Ô∏è", callback_data="run_other")  # 2-es gomb
    )
    bot.send_message(message.chat.id, "V√°lassz az al√°bbi lehet≈ës√©gek k√∂z√ºl:", reply_markup=keyboard)

# Callback query handler az inline gombokhoz
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "run_calc":
        bot.send_message(call.message.chat.id,
                         "Add meg az adatokat minden adatot k√ºl√∂n sorba √≠rva, √≠gy:\n\nLedolgozott napok sz√°ma:\nTelephely oda-vissza:\nFogyaszt√°s:\nG√°zolaj √°ra:")
        bot.register_next_step_handler(call.message, calc)
    elif call.data == "run_other":
        bot.send_message(call.message.chat.id, "Hol t√∫l√≥r√°zt√°l?")
        bot.register_next_step_handler(call.message, ask_location)

# Ha √ºzenetet k√ºldenek, amit nem tud kezelni, ind√≠tsa el az /start-ot
@bot.message_handler(func=lambda m: True)
def default_handler(message):
    bot.send_message(message.chat.id, "K√©rlek, haszn√°ld a /start parancsot a men√ºh√∂z.")

# Bot ind√≠t√°sa
bot.infinity_polling()
